---
- hosts: all
  become: yes
  vars:
    backup_dir: "/root/bashrc_backups"
    custom_bashrc_content: |
      # Custom bash configuration
      
      # If not running interactively, don't do anything
      case $- in
          *i*) ;;
            *) return;;
      esac

      # Preserve existing history settings
      HISTCONTROL=ignoreboth
      shopt -s histappend
      HISTSIZE=1000
      HISTFILESIZE=2000

      # Check window size after each command
      shopt -s checkwinsize

      # Custom Prompt and Path Configurations
      export PS1="\[\033[95m\]\u@\h \[\033[32m\]\W\[\033[33m\] [\$(git symbolic-ref --short HEAD 2>/dev/null)]\[\033[00m\]\$ "
      export PATH=$HOME/.local/bin:$HOME/bin:$PATH
      export PATH=$PATH:/sbin:/usr/sbin
      export DISPLAY=:0

  tasks:
    - name: Create backup directory
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'

    - name: Find specific users to update
      shell: 
        cmd: |
          getent passwd | cut -d: -f1,3,6 | awk -F: '$2 >= 1000 && $2 < 60000 {print $1 ":" $3}'
      register: user_list
      changed_when: false

    - name: Backup existing .bashrc for each user
      become: yes
      become_user: "{{ item.split(':')[0] }}"
      copy:
        src: "~/.bashrc"
        dest: "{{ backup_dir }}/bashrc_{{ item.split(':')[0] }}_$(date +%Y%m%d_%H%M%S)"
        remote_src: yes
      loop: "{{ user_list.stdout_lines }}"
      loop_control:
        label: "{{ item.split(':')[0] }}"
      ignore_errors: yes

    - name: Update system-wide skel .bashrc
      copy:
        content: "{{ custom_bashrc_content }}"
        dest: /etc/skel/.bashrc
        owner: root
        group: root
        mode: '0644'

    - name: Update .bashrc for specific users
      become: yes
      become_user: "{{ item.split(':')[0] }}"
      copy:
        content: "{{ custom_bashrc_content }}"
        dest: "~/.bashrc"
        mode: '0644'
      loop: "{{ user_list.stdout_lines }}"
      loop_control:
        label: "{{ item.split(':')[0] }}"
      ignore_errors: yes

    - name: Verify configurations for specific users
      shell: 
        cmd: |
          echo "Backups saved in {{ backup_dir }}:"
          ls -l "{{ backup_dir }}"
          echo "---"
          echo "Verifying configurations:"
          for user in $(getent passwd | cut -d: -f1,3,6 | awk -F: '$2 >= 1000 && $2 < 60000 {print $1}'); do
            echo "User: $user"
            sudo -u "$user" bash -lc '
              echo "PS1: $PS1"
              echo "PATH:"
              echo "$PATH" | tr ":" "\n"
              echo "DISPLAY: $DISPLAY"
              echo "---"
            '
          done
      register: config_verification
      changed_when: false

    - name: Display verification results
      debug:
        var: config_verification.stdout_lines
